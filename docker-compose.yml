services:
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:${KAFKA_PORT}
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${KAFKA_HOST}:${KAFKA_PORT}
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:${ZOOKEEPER_PORT}
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - ${KAFKA_PORT}:${KAFKA_PORT}
    depends_on:
      - zookeeper
    healthcheck:
      test: [ "CMD-SHELL", "echo dump | nc zookeeper ${ZOOKEEPER_PORT} | grep brokers" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    networks:
      - ${NETWORK}

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - ${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}
    healthcheck:
      test: [ "CMD", "echo ruok | nc zookeeper ${ZOOKEEPER_PORT} | grep imok" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    networks:
      - ${NETWORK}

  redis:
    image: redis:7.0
    container_name: redis
    command: [ "redis-server", "--appendonly", "yes" ]
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    networks:
      - ${NETWORK}

  mysql:
    image: mysql:8.0
    container_name: mysql
    ports:
      - ${MYSQL_PORT}:${MYSQL_PORT}
    volumes:
      - ./mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_USERNAME=${MYSQL_USERNAME}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-root", "-p${MYSQL_ROOT_PASSWORD}" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - ${NETWORK}

networks:
  berry-network:
    external: true

volumes:
  mysql_data:
  redis_data: