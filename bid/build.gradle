plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.berry'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2024.0.0")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'com.mysql:mysql-connector-j'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'org.springframework.kafka:spring-kafka'

    //Spring Cloud
    implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    //WebSocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    //Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // Spring Boot Data JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.4.1'

    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'

    // monitoring / Tracing
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.micrometer:micrometer-tracing'
    implementation 'io.micrometer:micrometer-tracing-bridge-brave'

    // zipkin
    implementation 'io.github.openfeign:feign-micrometer'
    implementation 'io.zipkin.reporter2:zipkin-reporter-brave'

    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

// QueryDSL 소스 디렉터리 설정
def querydslDir = layout.buildDirectory.dir("generated/querydsl") // DirectoryProperty로 설정

sourceSets {
    main {
        java {
            // QueryDSL 디렉터리를 소스셋에 포함
            srcDir querydslDir
        }
    }
}

tasks.named('clean') {
    doFirst {
        // QueryDSL 생성 디렉터리 삭제
        querydslDir.get().asFile.deleteDir()
    }
}

tasks.named('compileJava') {
    doFirst {
        // QueryDSL 생성 디렉터리가 없으면 생성
        querydslDir.get().asFile.mkdirs()
    }
    // QueryDSL Annotation Processor의 생성 디렉터리 지정
    options.annotationProcessorGeneratedSourcesDirectory = querydslDir.get().asFile
}